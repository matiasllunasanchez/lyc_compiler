Terminals unused in grammar

   THEN


Estado 0 conflictos: 8 desplazamiento(s)/reducción(ones)
Estado 10 conflictos: 8 desplazamiento/reducción, 1 reducción/reducción
Estado 48 conflictos: 2 desplazamiento(s)/reducción(ones)
Estado 61 conflictos: 1 desplazamiento(s)/reducción(ones)
Estado 63 conflictos: 1 desplazamiento(s)/reducción(ones)
Estado 75 conflictos: 8 desplazamiento(s)/reducción(ones)
Estado 78 conflictos: 8 desplazamiento(s)/reducción(ones)
Estado 96 conflictos: 9 desplazamiento(s)/reducción(ones)
Estado 100 conflictos: 10 desplazamiento(s)/reducción(ones)
Estado 105 conflictos: 8 desplazamiento(s)/reducción(ones)
Estado 109 conflictos: 9 desplazamiento(s)/reducción(ones)


Gramática

    0 $accept: start $end

    1 start: programa

    2 programa: sentencia
    3         | programa sentencia

    4 sentencia: /* vacío */
    5          | declaracion
    6          | asignacion
    7          | ciclo
    8          | condicional
    9          | salida
   10          | entrada
   11          | entre
   12          | tomar

   13 declaracion: DECVAR bloque_variables ENDDEC

   14 listavar: ID
   15         | listavar COMA ID

   16 tipodato: INTEGER
   17         | FLOAT
   18         | STRING

   19 bloque_variables: bloque_variables listavar OP_TIPO tipodato
   20                 | listavar OP_TIPO tipodato

   21 condicional: IF PAR_A condicion PAR_C programa ELSE programa ENDIF
   22            | IF PAR_A condicion PAR_C programa ENDIF

   23 ciclo: WHILE PAR_A condicion PAR_C programa ENDWHILE

   24 asignacion: ID OP_ASIG expresion
   25           | ID OP_ASIG CONST_STR

   26 expresion: expresion OP_SUMA termino
   27          | expresion OP_RESTA termino
   28          | termino

   29 termino: termino OP_MULT factor
   30        | termino OP_DIV factor
   31        | factor

   32 factor: PAR_A expresion PAR_C
   33       | CONST_REAL
   34       | ID
   35       | CONST_ENT

   36 condicion: exp
   37          | exp AND exp_izq
   38          | exp OR exp_izq

   39 exp: comparacion
   40    | PAR_A comparacion PAR_C
   41    | expresion

   42 exp_izq: exp

   43 comparacion: expresion comparador factor
   44            | PAR_A condicion PAR_C
   45            | NOT condicion

   46 comparador: OP_MAYOR
   47           | OP_MENOR
   48           | OP_MENIGU
   49           | OP_MAYIGU
   50           | OP_IGUAL
   51           | OP_NO_IGUAL

   52 entrada: READ ID

   53 salida: WRITE CONST_STR
   54       | WRITE ID

   55 entre: BETWEEN PAR_A ID COMA COR_A expresion PYC expresion COR_C PAR_C

   56 tomar: TAKE PAR_A oper PYC CONST_ENT PYC COR_A listapyc COR_C PAR_C
   57      | TAKE PAR_A oper PYC CONST_ENT PYC COR_A COR_C PAR_C

   58 listapyc: factor
   59         | listapyc PYC factor

   60 oper: OP_SUMA
   61     | OP_MULT
   62     | OP_DIV
   63     | OP_RESTA


Terminales con las reglas donde aparecen

$end (0) 0
error (256)
OP_ASIG (258) 24 25
OP_RESTA (259) 27 63
OP_SUMA (260) 26 60
OP_DIV (261) 30 62
OP_MULT (262) 29 61
OP_MAYOR (263) 46
OP_MAYIGU (264) 49
OP_MENOR (265) 47
OP_MENIGU (266) 48
OP_IGUAL (267) 50
OP_NO_IGUAL (268) 51
OP_TIPO (269) 19 20
TAKE (270) 56 57
BETWEEN (271) 55
WHILE (272) 23
IF (273) 21 22
INTEGER (274) 16
FLOAT (275) 17
STRING (276) 18
ELSE (277) 21
THEN (278)
DECVAR (279) 13
ENDDEC (280) 13
AND (281) 37
OR (282) 38
NOT (283) 45
WRITE (284) 53 54
READ (285) 52
COMA (286) 15 55
ENDIF (287) 21 22
ENDWHILE (288) 23
PAR_A (289) 21 22 23 32 40 44 55 56 57
PAR_C (290) 21 22 23 32 40 44 55 56 57
COR_A (291) 55 56 57
COR_C (292) 55 56 57
PYC (293) 55 56 57 59
ID (294) 14 15 24 25 34 52 54 55
CONST_ENT (295) 35 56 57
CONST_REAL (296) 33
CONST_STR (297) 25 53


No terminales con las reglas donde aparecen

$accept (43)
    en la izquierda: 0
start (44)
    en la izquierda: 1, en la derecha: 0
programa (45)
    en la izquierda: 2 3, en la derecha: 1 3 21 22 23
sentencia (46)
    en la izquierda: 4 5 6 7 8 9 10 11 12, en la derecha: 2 3
declaracion (47)
    en la izquierda: 13, en la derecha: 5
listavar (48)
    en la izquierda: 14 15, en la derecha: 15 19 20
tipodato (49)
    en la izquierda: 16 17 18, en la derecha: 19 20
bloque_variables (50)
    en la izquierda: 19 20, en la derecha: 13 19
condicional (51)
    en la izquierda: 21 22, en la derecha: 8
ciclo (52)
    en la izquierda: 23, en la derecha: 7
asignacion (53)
    en la izquierda: 24 25, en la derecha: 6
expresion (54)
    en la izquierda: 26 27 28, en la derecha: 24 26 27 32 41 43 55
termino (55)
    en la izquierda: 29 30 31, en la derecha: 26 27 28 29 30
factor (56)
    en la izquierda: 32 33 34 35, en la derecha: 29 30 31 43 58 59
condicion (57)
    en la izquierda: 36 37 38, en la derecha: 21 22 23 44 45
exp (58)
    en la izquierda: 39 40 41, en la derecha: 36 37 38 42
exp_izq (59)
    en la izquierda: 42, en la derecha: 37 38
comparacion (60)
    en la izquierda: 43 44 45, en la derecha: 39 40
comparador (61)
    en la izquierda: 46 47 48 49 50 51, en la derecha: 43
entrada (62)
    en la izquierda: 52, en la derecha: 10
salida (63)
    en la izquierda: 53 54, en la derecha: 9
entre (64)
    en la izquierda: 55, en la derecha: 11
tomar (65)
    en la izquierda: 56 57, en la derecha: 12
listapyc (66)
    en la izquierda: 58 59, en la derecha: 56 59
oper (67)
    en la izquierda: 60 61 62 63, en la derecha: 56 57


estado 0

    0 $accept: . start $end

    TAKE     desplazar e ir al estado 1
    BETWEEN  desplazar e ir al estado 2
    WHILE    desplazar e ir al estado 3
    IF       desplazar e ir al estado 4
    DECVAR   desplazar e ir al estado 5
    WRITE    desplazar e ir al estado 6
    READ     desplazar e ir al estado 7
    ID       desplazar e ir al estado 8

    TAKE      [reduce usando la regla 4 (sentencia)]
    BETWEEN   [reduce usando la regla 4 (sentencia)]
    WHILE     [reduce usando la regla 4 (sentencia)]
    IF        [reduce usando la regla 4 (sentencia)]
    DECVAR    [reduce usando la regla 4 (sentencia)]
    WRITE     [reduce usando la regla 4 (sentencia)]
    READ      [reduce usando la regla 4 (sentencia)]
    ID        [reduce usando la regla 4 (sentencia)]
    $default  reduce usando la regla 4 (sentencia)

    start        ir al estado 9
    programa     ir al estado 10
    sentencia    ir al estado 11
    declaracion  ir al estado 12
    condicional  ir al estado 13
    ciclo        ir al estado 14
    asignacion   ir al estado 15
    entrada      ir al estado 16
    salida       ir al estado 17
    entre        ir al estado 18
    tomar        ir al estado 19


estado 1

   56 tomar: TAKE . PAR_A oper PYC CONST_ENT PYC COR_A listapyc COR_C PAR_C
   57      | TAKE . PAR_A oper PYC CONST_ENT PYC COR_A COR_C PAR_C

    PAR_A  desplazar e ir al estado 20


estado 2

   55 entre: BETWEEN . PAR_A ID COMA COR_A expresion PYC expresion COR_C PAR_C

    PAR_A  desplazar e ir al estado 21


estado 3

   23 ciclo: WHILE . PAR_A condicion PAR_C programa ENDWHILE

    PAR_A  desplazar e ir al estado 22


estado 4

   21 condicional: IF . PAR_A condicion PAR_C programa ELSE programa ENDIF
   22            | IF . PAR_A condicion PAR_C programa ENDIF

    PAR_A  desplazar e ir al estado 23


estado 5

   13 declaracion: DECVAR . bloque_variables ENDDEC

    ID  desplazar e ir al estado 24

    listavar          ir al estado 25
    bloque_variables  ir al estado 26


estado 6

   53 salida: WRITE . CONST_STR
   54       | WRITE . ID

    ID         desplazar e ir al estado 27
    CONST_STR  desplazar e ir al estado 28


estado 7

   52 entrada: READ . ID

    ID  desplazar e ir al estado 29


estado 8

   24 asignacion: ID . OP_ASIG expresion
   25           | ID . OP_ASIG CONST_STR

    OP_ASIG  desplazar e ir al estado 30


estado 9

    0 $accept: start . $end

    $end  desplazar e ir al estado 31


estado 10

    1 start: programa .
    3 programa: programa . sentencia

    TAKE     desplazar e ir al estado 1
    BETWEEN  desplazar e ir al estado 2
    WHILE    desplazar e ir al estado 3
    IF       desplazar e ir al estado 4
    DECVAR   desplazar e ir al estado 5
    WRITE    desplazar e ir al estado 6
    READ     desplazar e ir al estado 7
    ID       desplazar e ir al estado 8

    $end      reduce usando la regla 1 (start)
    $end      [reduce usando la regla 4 (sentencia)]
    TAKE      [reduce usando la regla 4 (sentencia)]
    BETWEEN   [reduce usando la regla 4 (sentencia)]
    WHILE     [reduce usando la regla 4 (sentencia)]
    IF        [reduce usando la regla 4 (sentencia)]
    DECVAR    [reduce usando la regla 4 (sentencia)]
    WRITE     [reduce usando la regla 4 (sentencia)]
    READ      [reduce usando la regla 4 (sentencia)]
    ID        [reduce usando la regla 4 (sentencia)]
    $default  reduce usando la regla 1 (start)

    sentencia    ir al estado 32
    declaracion  ir al estado 12
    condicional  ir al estado 13
    ciclo        ir al estado 14
    asignacion   ir al estado 15
    entrada      ir al estado 16
    salida       ir al estado 17
    entre        ir al estado 18
    tomar        ir al estado 19


estado 11

    2 programa: sentencia .

    $default  reduce usando la regla 2 (programa)


estado 12

    5 sentencia: declaracion .

    $default  reduce usando la regla 5 (sentencia)


estado 13

    8 sentencia: condicional .

    $default  reduce usando la regla 8 (sentencia)


estado 14

    7 sentencia: ciclo .

    $default  reduce usando la regla 7 (sentencia)


estado 15

    6 sentencia: asignacion .

    $default  reduce usando la regla 6 (sentencia)


estado 16

   10 sentencia: entrada .

    $default  reduce usando la regla 10 (sentencia)


estado 17

    9 sentencia: salida .

    $default  reduce usando la regla 9 (sentencia)


estado 18

   11 sentencia: entre .

    $default  reduce usando la regla 11 (sentencia)


estado 19

   12 sentencia: tomar .

    $default  reduce usando la regla 12 (sentencia)


estado 20

   56 tomar: TAKE PAR_A . oper PYC CONST_ENT PYC COR_A listapyc COR_C PAR_C
   57      | TAKE PAR_A . oper PYC CONST_ENT PYC COR_A COR_C PAR_C

    OP_RESTA  desplazar e ir al estado 33
    OP_SUMA   desplazar e ir al estado 34
    OP_DIV    desplazar e ir al estado 35
    OP_MULT   desplazar e ir al estado 36

    oper  ir al estado 37


estado 21

   55 entre: BETWEEN PAR_A . ID COMA COR_A expresion PYC expresion COR_C PAR_C

    ID  desplazar e ir al estado 38


estado 22

   23 ciclo: WHILE PAR_A . condicion PAR_C programa ENDWHILE

    NOT         desplazar e ir al estado 39
    PAR_A       desplazar e ir al estado 40
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion    ir al estado 44
    termino      ir al estado 45
    factor       ir al estado 46
    condicion    ir al estado 47
    exp          ir al estado 48
    comparacion  ir al estado 49


estado 23

   21 condicional: IF PAR_A . condicion PAR_C programa ELSE programa ENDIF
   22            | IF PAR_A . condicion PAR_C programa ENDIF

    NOT         desplazar e ir al estado 39
    PAR_A       desplazar e ir al estado 40
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion    ir al estado 44
    termino      ir al estado 45
    factor       ir al estado 46
    condicion    ir al estado 50
    exp          ir al estado 48
    comparacion  ir al estado 49


estado 24

   14 listavar: ID .

    $default  reduce usando la regla 14 (listavar)


estado 25

   15 listavar: listavar . COMA ID
   20 bloque_variables: listavar . OP_TIPO tipodato

    OP_TIPO  desplazar e ir al estado 51
    COMA     desplazar e ir al estado 52


estado 26

   13 declaracion: DECVAR bloque_variables . ENDDEC
   19 bloque_variables: bloque_variables . listavar OP_TIPO tipodato

    ENDDEC  desplazar e ir al estado 53
    ID      desplazar e ir al estado 24

    listavar  ir al estado 54


estado 27

   54 salida: WRITE ID .

    $default  reduce usando la regla 54 (salida)


estado 28

   53 salida: WRITE CONST_STR .

    $default  reduce usando la regla 53 (salida)


estado 29

   52 entrada: READ ID .

    $default  reduce usando la regla 52 (entrada)


estado 30

   24 asignacion: ID OP_ASIG . expresion
   25           | ID OP_ASIG . CONST_STR

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43
    CONST_STR   desplazar e ir al estado 56

    expresion  ir al estado 57
    termino    ir al estado 45
    factor     ir al estado 46


estado 31

    0 $accept: start $end .

    $default  aceptar


estado 32

    3 programa: programa sentencia .

    $default  reduce usando la regla 3 (programa)


estado 33

   63 oper: OP_RESTA .

    $default  reduce usando la regla 63 (oper)


estado 34

   60 oper: OP_SUMA .

    $default  reduce usando la regla 60 (oper)


estado 35

   62 oper: OP_DIV .

    $default  reduce usando la regla 62 (oper)


estado 36

   61 oper: OP_MULT .

    $default  reduce usando la regla 61 (oper)


estado 37

   56 tomar: TAKE PAR_A oper . PYC CONST_ENT PYC COR_A listapyc COR_C PAR_C
   57      | TAKE PAR_A oper . PYC CONST_ENT PYC COR_A COR_C PAR_C

    PYC  desplazar e ir al estado 58


estado 38

   55 entre: BETWEEN PAR_A ID . COMA COR_A expresion PYC expresion COR_C PAR_C

    COMA  desplazar e ir al estado 59


estado 39

   45 comparacion: NOT . condicion

    NOT         desplazar e ir al estado 39
    PAR_A       desplazar e ir al estado 40
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion    ir al estado 44
    termino      ir al estado 45
    factor       ir al estado 46
    condicion    ir al estado 60
    exp          ir al estado 48
    comparacion  ir al estado 49


estado 40

   32 factor: PAR_A . expresion PAR_C
   40 exp: PAR_A . comparacion PAR_C
   44 comparacion: PAR_A . condicion PAR_C

    NOT         desplazar e ir al estado 39
    PAR_A       desplazar e ir al estado 40
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion    ir al estado 61
    termino      ir al estado 45
    factor       ir al estado 46
    condicion    ir al estado 62
    exp          ir al estado 48
    comparacion  ir al estado 63


estado 41

   34 factor: ID .

    $default  reduce usando la regla 34 (factor)


estado 42

   35 factor: CONST_ENT .

    $default  reduce usando la regla 35 (factor)


estado 43

   33 factor: CONST_REAL .

    $default  reduce usando la regla 33 (factor)


estado 44

   26 expresion: expresion . OP_SUMA termino
   27          | expresion . OP_RESTA termino
   41 exp: expresion .
   43 comparacion: expresion . comparador factor

    OP_RESTA     desplazar e ir al estado 64
    OP_SUMA      desplazar e ir al estado 65
    OP_MAYOR     desplazar e ir al estado 66
    OP_MAYIGU    desplazar e ir al estado 67
    OP_MENOR     desplazar e ir al estado 68
    OP_MENIGU    desplazar e ir al estado 69
    OP_IGUAL     desplazar e ir al estado 70
    OP_NO_IGUAL  desplazar e ir al estado 71

    $default  reduce usando la regla 41 (exp)

    comparador  ir al estado 72


estado 45

   28 expresion: termino .
   29 termino: termino . OP_MULT factor
   30        | termino . OP_DIV factor

    OP_DIV   desplazar e ir al estado 73
    OP_MULT  desplazar e ir al estado 74

    $default  reduce usando la regla 28 (expresion)


estado 46

   31 termino: factor .

    $default  reduce usando la regla 31 (termino)


estado 47

   23 ciclo: WHILE PAR_A condicion . PAR_C programa ENDWHILE

    PAR_C  desplazar e ir al estado 75


estado 48

   36 condicion: exp .
   37          | exp . AND exp_izq
   38          | exp . OR exp_izq

    AND  desplazar e ir al estado 76
    OR   desplazar e ir al estado 77

    AND       [reduce usando la regla 36 (condicion)]
    OR        [reduce usando la regla 36 (condicion)]
    $default  reduce usando la regla 36 (condicion)


estado 49

   39 exp: comparacion .

    $default  reduce usando la regla 39 (exp)


estado 50

   21 condicional: IF PAR_A condicion . PAR_C programa ELSE programa ENDIF
   22            | IF PAR_A condicion . PAR_C programa ENDIF

    PAR_C  desplazar e ir al estado 78


estado 51

   20 bloque_variables: listavar OP_TIPO . tipodato

    INTEGER  desplazar e ir al estado 79
    FLOAT    desplazar e ir al estado 80
    STRING   desplazar e ir al estado 81

    tipodato  ir al estado 82


estado 52

   15 listavar: listavar COMA . ID

    ID  desplazar e ir al estado 83


estado 53

   13 declaracion: DECVAR bloque_variables ENDDEC .

    $default  reduce usando la regla 13 (declaracion)


estado 54

   15 listavar: listavar . COMA ID
   19 bloque_variables: bloque_variables listavar . OP_TIPO tipodato

    OP_TIPO  desplazar e ir al estado 84
    COMA     desplazar e ir al estado 52


estado 55

   32 factor: PAR_A . expresion PAR_C

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion  ir al estado 85
    termino    ir al estado 45
    factor     ir al estado 46


estado 56

   25 asignacion: ID OP_ASIG CONST_STR .

    $default  reduce usando la regla 25 (asignacion)


estado 57

   24 asignacion: ID OP_ASIG expresion .
   26 expresion: expresion . OP_SUMA termino
   27          | expresion . OP_RESTA termino

    OP_RESTA  desplazar e ir al estado 64
    OP_SUMA   desplazar e ir al estado 65

    $default  reduce usando la regla 24 (asignacion)


estado 58

   56 tomar: TAKE PAR_A oper PYC . CONST_ENT PYC COR_A listapyc COR_C PAR_C
   57      | TAKE PAR_A oper PYC . CONST_ENT PYC COR_A COR_C PAR_C

    CONST_ENT  desplazar e ir al estado 86


estado 59

   55 entre: BETWEEN PAR_A ID COMA . COR_A expresion PYC expresion COR_C PAR_C

    COR_A  desplazar e ir al estado 87


estado 60

   45 comparacion: NOT condicion .

    $default  reduce usando la regla 45 (comparacion)


estado 61

   26 expresion: expresion . OP_SUMA termino
   27          | expresion . OP_RESTA termino
   32 factor: PAR_A expresion . PAR_C
   41 exp: expresion .
   43 comparacion: expresion . comparador factor

    OP_RESTA     desplazar e ir al estado 64
    OP_SUMA      desplazar e ir al estado 65
    OP_MAYOR     desplazar e ir al estado 66
    OP_MAYIGU    desplazar e ir al estado 67
    OP_MENOR     desplazar e ir al estado 68
    OP_MENIGU    desplazar e ir al estado 69
    OP_IGUAL     desplazar e ir al estado 70
    OP_NO_IGUAL  desplazar e ir al estado 71
    PAR_C        desplazar e ir al estado 88

    PAR_C     [reduce usando la regla 41 (exp)]
    $default  reduce usando la regla 41 (exp)

    comparador  ir al estado 72


estado 62

   44 comparacion: PAR_A condicion . PAR_C

    PAR_C  desplazar e ir al estado 89


estado 63

   39 exp: comparacion .
   40    | PAR_A comparacion . PAR_C

    PAR_C  desplazar e ir al estado 90

    PAR_C     [reduce usando la regla 39 (exp)]
    $default  reduce usando la regla 39 (exp)


estado 64

   27 expresion: expresion OP_RESTA . termino

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    termino  ir al estado 91
    factor   ir al estado 46


estado 65

   26 expresion: expresion OP_SUMA . termino

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    termino  ir al estado 92
    factor   ir al estado 46


estado 66

   46 comparador: OP_MAYOR .

    $default  reduce usando la regla 46 (comparador)


estado 67

   49 comparador: OP_MAYIGU .

    $default  reduce usando la regla 49 (comparador)


estado 68

   47 comparador: OP_MENOR .

    $default  reduce usando la regla 47 (comparador)


estado 69

   48 comparador: OP_MENIGU .

    $default  reduce usando la regla 48 (comparador)


estado 70

   50 comparador: OP_IGUAL .

    $default  reduce usando la regla 50 (comparador)


estado 71

   51 comparador: OP_NO_IGUAL .

    $default  reduce usando la regla 51 (comparador)


estado 72

   43 comparacion: expresion comparador . factor

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    factor  ir al estado 93


estado 73

   30 termino: termino OP_DIV . factor

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    factor  ir al estado 94


estado 74

   29 termino: termino OP_MULT . factor

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    factor  ir al estado 95


estado 75

   23 ciclo: WHILE PAR_A condicion PAR_C . programa ENDWHILE

    TAKE     desplazar e ir al estado 1
    BETWEEN  desplazar e ir al estado 2
    WHILE    desplazar e ir al estado 3
    IF       desplazar e ir al estado 4
    DECVAR   desplazar e ir al estado 5
    WRITE    desplazar e ir al estado 6
    READ     desplazar e ir al estado 7
    ID       desplazar e ir al estado 8

    TAKE      [reduce usando la regla 4 (sentencia)]
    BETWEEN   [reduce usando la regla 4 (sentencia)]
    WHILE     [reduce usando la regla 4 (sentencia)]
    IF        [reduce usando la regla 4 (sentencia)]
    DECVAR    [reduce usando la regla 4 (sentencia)]
    WRITE     [reduce usando la regla 4 (sentencia)]
    READ      [reduce usando la regla 4 (sentencia)]
    ID        [reduce usando la regla 4 (sentencia)]
    $default  reduce usando la regla 4 (sentencia)

    programa     ir al estado 96
    sentencia    ir al estado 11
    declaracion  ir al estado 12
    condicional  ir al estado 13
    ciclo        ir al estado 14
    asignacion   ir al estado 15
    entrada      ir al estado 16
    salida       ir al estado 17
    entre        ir al estado 18
    tomar        ir al estado 19


estado 76

   37 condicion: exp AND . exp_izq

    NOT         desplazar e ir al estado 39
    PAR_A       desplazar e ir al estado 40
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion    ir al estado 44
    termino      ir al estado 45
    factor       ir al estado 46
    exp          ir al estado 97
    exp_izq      ir al estado 98
    comparacion  ir al estado 49


estado 77

   38 condicion: exp OR . exp_izq

    NOT         desplazar e ir al estado 39
    PAR_A       desplazar e ir al estado 40
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion    ir al estado 44
    termino      ir al estado 45
    factor       ir al estado 46
    exp          ir al estado 97
    exp_izq      ir al estado 99
    comparacion  ir al estado 49


estado 78

   21 condicional: IF PAR_A condicion PAR_C . programa ELSE programa ENDIF
   22            | IF PAR_A condicion PAR_C . programa ENDIF

    TAKE     desplazar e ir al estado 1
    BETWEEN  desplazar e ir al estado 2
    WHILE    desplazar e ir al estado 3
    IF       desplazar e ir al estado 4
    DECVAR   desplazar e ir al estado 5
    WRITE    desplazar e ir al estado 6
    READ     desplazar e ir al estado 7
    ID       desplazar e ir al estado 8

    TAKE      [reduce usando la regla 4 (sentencia)]
    BETWEEN   [reduce usando la regla 4 (sentencia)]
    WHILE     [reduce usando la regla 4 (sentencia)]
    IF        [reduce usando la regla 4 (sentencia)]
    DECVAR    [reduce usando la regla 4 (sentencia)]
    WRITE     [reduce usando la regla 4 (sentencia)]
    READ      [reduce usando la regla 4 (sentencia)]
    ID        [reduce usando la regla 4 (sentencia)]
    $default  reduce usando la regla 4 (sentencia)

    programa     ir al estado 100
    sentencia    ir al estado 11
    declaracion  ir al estado 12
    condicional  ir al estado 13
    ciclo        ir al estado 14
    asignacion   ir al estado 15
    entrada      ir al estado 16
    salida       ir al estado 17
    entre        ir al estado 18
    tomar        ir al estado 19


estado 79

   16 tipodato: INTEGER .

    $default  reduce usando la regla 16 (tipodato)


estado 80

   17 tipodato: FLOAT .

    $default  reduce usando la regla 17 (tipodato)


estado 81

   18 tipodato: STRING .

    $default  reduce usando la regla 18 (tipodato)


estado 82

   20 bloque_variables: listavar OP_TIPO tipodato .

    $default  reduce usando la regla 20 (bloque_variables)


estado 83

   15 listavar: listavar COMA ID .

    $default  reduce usando la regla 15 (listavar)


estado 84

   19 bloque_variables: bloque_variables listavar OP_TIPO . tipodato

    INTEGER  desplazar e ir al estado 79
    FLOAT    desplazar e ir al estado 80
    STRING   desplazar e ir al estado 81

    tipodato  ir al estado 101


estado 85

   26 expresion: expresion . OP_SUMA termino
   27          | expresion . OP_RESTA termino
   32 factor: PAR_A expresion . PAR_C

    OP_RESTA  desplazar e ir al estado 64
    OP_SUMA   desplazar e ir al estado 65
    PAR_C     desplazar e ir al estado 88


estado 86

   56 tomar: TAKE PAR_A oper PYC CONST_ENT . PYC COR_A listapyc COR_C PAR_C
   57      | TAKE PAR_A oper PYC CONST_ENT . PYC COR_A COR_C PAR_C

    PYC  desplazar e ir al estado 102


estado 87

   55 entre: BETWEEN PAR_A ID COMA COR_A . expresion PYC expresion COR_C PAR_C

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion  ir al estado 103
    termino    ir al estado 45
    factor     ir al estado 46


estado 88

   32 factor: PAR_A expresion PAR_C .

    $default  reduce usando la regla 32 (factor)


estado 89

   44 comparacion: PAR_A condicion PAR_C .

    $default  reduce usando la regla 44 (comparacion)


estado 90

   40 exp: PAR_A comparacion PAR_C .

    $default  reduce usando la regla 40 (exp)


estado 91

   27 expresion: expresion OP_RESTA termino .
   29 termino: termino . OP_MULT factor
   30        | termino . OP_DIV factor

    OP_DIV   desplazar e ir al estado 73
    OP_MULT  desplazar e ir al estado 74

    $default  reduce usando la regla 27 (expresion)


estado 92

   26 expresion: expresion OP_SUMA termino .
   29 termino: termino . OP_MULT factor
   30        | termino . OP_DIV factor

    OP_DIV   desplazar e ir al estado 73
    OP_MULT  desplazar e ir al estado 74

    $default  reduce usando la regla 26 (expresion)


estado 93

   43 comparacion: expresion comparador factor .

    $default  reduce usando la regla 43 (comparacion)


estado 94

   30 termino: termino OP_DIV factor .

    $default  reduce usando la regla 30 (termino)


estado 95

   29 termino: termino OP_MULT factor .

    $default  reduce usando la regla 29 (termino)


estado 96

    3 programa: programa . sentencia
   23 ciclo: WHILE PAR_A condicion PAR_C programa . ENDWHILE

    TAKE      desplazar e ir al estado 1
    BETWEEN   desplazar e ir al estado 2
    WHILE     desplazar e ir al estado 3
    IF        desplazar e ir al estado 4
    DECVAR    desplazar e ir al estado 5
    WRITE     desplazar e ir al estado 6
    READ      desplazar e ir al estado 7
    ENDWHILE  desplazar e ir al estado 104
    ID        desplazar e ir al estado 8

    TAKE      [reduce usando la regla 4 (sentencia)]
    BETWEEN   [reduce usando la regla 4 (sentencia)]
    WHILE     [reduce usando la regla 4 (sentencia)]
    IF        [reduce usando la regla 4 (sentencia)]
    DECVAR    [reduce usando la regla 4 (sentencia)]
    WRITE     [reduce usando la regla 4 (sentencia)]
    READ      [reduce usando la regla 4 (sentencia)]
    ENDWHILE  [reduce usando la regla 4 (sentencia)]
    ID        [reduce usando la regla 4 (sentencia)]

    sentencia    ir al estado 32
    declaracion  ir al estado 12
    condicional  ir al estado 13
    ciclo        ir al estado 14
    asignacion   ir al estado 15
    entrada      ir al estado 16
    salida       ir al estado 17
    entre        ir al estado 18
    tomar        ir al estado 19


estado 97

   42 exp_izq: exp .

    $default  reduce usando la regla 42 (exp_izq)


estado 98

   37 condicion: exp AND exp_izq .

    $default  reduce usando la regla 37 (condicion)


estado 99

   38 condicion: exp OR exp_izq .

    $default  reduce usando la regla 38 (condicion)


estado 100

    3 programa: programa . sentencia
   21 condicional: IF PAR_A condicion PAR_C programa . ELSE programa ENDIF
   22            | IF PAR_A condicion PAR_C programa . ENDIF

    TAKE     desplazar e ir al estado 1
    BETWEEN  desplazar e ir al estado 2
    WHILE    desplazar e ir al estado 3
    IF       desplazar e ir al estado 4
    ELSE     desplazar e ir al estado 105
    DECVAR   desplazar e ir al estado 5
    WRITE    desplazar e ir al estado 6
    READ     desplazar e ir al estado 7
    ENDIF    desplazar e ir al estado 106
    ID       desplazar e ir al estado 8

    TAKE     [reduce usando la regla 4 (sentencia)]
    BETWEEN  [reduce usando la regla 4 (sentencia)]
    WHILE    [reduce usando la regla 4 (sentencia)]
    IF       [reduce usando la regla 4 (sentencia)]
    ELSE     [reduce usando la regla 4 (sentencia)]
    DECVAR   [reduce usando la regla 4 (sentencia)]
    WRITE    [reduce usando la regla 4 (sentencia)]
    READ     [reduce usando la regla 4 (sentencia)]
    ENDIF    [reduce usando la regla 4 (sentencia)]
    ID       [reduce usando la regla 4 (sentencia)]

    sentencia    ir al estado 32
    declaracion  ir al estado 12
    condicional  ir al estado 13
    ciclo        ir al estado 14
    asignacion   ir al estado 15
    entrada      ir al estado 16
    salida       ir al estado 17
    entre        ir al estado 18
    tomar        ir al estado 19


estado 101

   19 bloque_variables: bloque_variables listavar OP_TIPO tipodato .

    $default  reduce usando la regla 19 (bloque_variables)


estado 102

   56 tomar: TAKE PAR_A oper PYC CONST_ENT PYC . COR_A listapyc COR_C PAR_C
   57      | TAKE PAR_A oper PYC CONST_ENT PYC . COR_A COR_C PAR_C

    COR_A  desplazar e ir al estado 107


estado 103

   26 expresion: expresion . OP_SUMA termino
   27          | expresion . OP_RESTA termino
   55 entre: BETWEEN PAR_A ID COMA COR_A expresion . PYC expresion COR_C PAR_C

    OP_RESTA  desplazar e ir al estado 64
    OP_SUMA   desplazar e ir al estado 65
    PYC       desplazar e ir al estado 108


estado 104

   23 ciclo: WHILE PAR_A condicion PAR_C programa ENDWHILE .

    $default  reduce usando la regla 23 (ciclo)


estado 105

   21 condicional: IF PAR_A condicion PAR_C programa ELSE . programa ENDIF

    TAKE     desplazar e ir al estado 1
    BETWEEN  desplazar e ir al estado 2
    WHILE    desplazar e ir al estado 3
    IF       desplazar e ir al estado 4
    DECVAR   desplazar e ir al estado 5
    WRITE    desplazar e ir al estado 6
    READ     desplazar e ir al estado 7
    ID       desplazar e ir al estado 8

    TAKE      [reduce usando la regla 4 (sentencia)]
    BETWEEN   [reduce usando la regla 4 (sentencia)]
    WHILE     [reduce usando la regla 4 (sentencia)]
    IF        [reduce usando la regla 4 (sentencia)]
    DECVAR    [reduce usando la regla 4 (sentencia)]
    WRITE     [reduce usando la regla 4 (sentencia)]
    READ      [reduce usando la regla 4 (sentencia)]
    ID        [reduce usando la regla 4 (sentencia)]
    $default  reduce usando la regla 4 (sentencia)

    programa     ir al estado 109
    sentencia    ir al estado 11
    declaracion  ir al estado 12
    condicional  ir al estado 13
    ciclo        ir al estado 14
    asignacion   ir al estado 15
    entrada      ir al estado 16
    salida       ir al estado 17
    entre        ir al estado 18
    tomar        ir al estado 19


estado 106

   22 condicional: IF PAR_A condicion PAR_C programa ENDIF .

    $default  reduce usando la regla 22 (condicional)


estado 107

   56 tomar: TAKE PAR_A oper PYC CONST_ENT PYC COR_A . listapyc COR_C PAR_C
   57      | TAKE PAR_A oper PYC CONST_ENT PYC COR_A . COR_C PAR_C

    PAR_A       desplazar e ir al estado 55
    COR_C       desplazar e ir al estado 110
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    factor    ir al estado 111
    listapyc  ir al estado 112


estado 108

   55 entre: BETWEEN PAR_A ID COMA COR_A expresion PYC . expresion COR_C PAR_C

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    expresion  ir al estado 113
    termino    ir al estado 45
    factor     ir al estado 46


estado 109

    3 programa: programa . sentencia
   21 condicional: IF PAR_A condicion PAR_C programa ELSE programa . ENDIF

    TAKE     desplazar e ir al estado 1
    BETWEEN  desplazar e ir al estado 2
    WHILE    desplazar e ir al estado 3
    IF       desplazar e ir al estado 4
    DECVAR   desplazar e ir al estado 5
    WRITE    desplazar e ir al estado 6
    READ     desplazar e ir al estado 7
    ENDIF    desplazar e ir al estado 114
    ID       desplazar e ir al estado 8

    TAKE     [reduce usando la regla 4 (sentencia)]
    BETWEEN  [reduce usando la regla 4 (sentencia)]
    WHILE    [reduce usando la regla 4 (sentencia)]
    IF       [reduce usando la regla 4 (sentencia)]
    DECVAR   [reduce usando la regla 4 (sentencia)]
    WRITE    [reduce usando la regla 4 (sentencia)]
    READ     [reduce usando la regla 4 (sentencia)]
    ENDIF    [reduce usando la regla 4 (sentencia)]
    ID       [reduce usando la regla 4 (sentencia)]

    sentencia    ir al estado 32
    declaracion  ir al estado 12
    condicional  ir al estado 13
    ciclo        ir al estado 14
    asignacion   ir al estado 15
    entrada      ir al estado 16
    salida       ir al estado 17
    entre        ir al estado 18
    tomar        ir al estado 19


estado 110

   57 tomar: TAKE PAR_A oper PYC CONST_ENT PYC COR_A COR_C . PAR_C

    PAR_C  desplazar e ir al estado 115


estado 111

   58 listapyc: factor .

    $default  reduce usando la regla 58 (listapyc)


estado 112

   56 tomar: TAKE PAR_A oper PYC CONST_ENT PYC COR_A listapyc . COR_C PAR_C
   59 listapyc: listapyc . PYC factor

    COR_C  desplazar e ir al estado 116
    PYC    desplazar e ir al estado 117


estado 113

   26 expresion: expresion . OP_SUMA termino
   27          | expresion . OP_RESTA termino
   55 entre: BETWEEN PAR_A ID COMA COR_A expresion PYC expresion . COR_C PAR_C

    OP_RESTA  desplazar e ir al estado 64
    OP_SUMA   desplazar e ir al estado 65
    COR_C     desplazar e ir al estado 118


estado 114

   21 condicional: IF PAR_A condicion PAR_C programa ELSE programa ENDIF .

    $default  reduce usando la regla 21 (condicional)


estado 115

   57 tomar: TAKE PAR_A oper PYC CONST_ENT PYC COR_A COR_C PAR_C .

    $default  reduce usando la regla 57 (tomar)


estado 116

   56 tomar: TAKE PAR_A oper PYC CONST_ENT PYC COR_A listapyc COR_C . PAR_C

    PAR_C  desplazar e ir al estado 119


estado 117

   59 listapyc: listapyc PYC . factor

    PAR_A       desplazar e ir al estado 55
    ID          desplazar e ir al estado 41
    CONST_ENT   desplazar e ir al estado 42
    CONST_REAL  desplazar e ir al estado 43

    factor  ir al estado 120


estado 118

   55 entre: BETWEEN PAR_A ID COMA COR_A expresion PYC expresion COR_C . PAR_C

    PAR_C  desplazar e ir al estado 121


estado 119

   56 tomar: TAKE PAR_A oper PYC CONST_ENT PYC COR_A listapyc COR_C PAR_C .

    $default  reduce usando la regla 56 (tomar)


estado 120

   59 listapyc: listapyc PYC factor .

    $default  reduce usando la regla 59 (listapyc)


estado 121

   55 entre: BETWEEN PAR_A ID COMA COR_A expresion PYC expresion COR_C PAR_C .

    $default  reduce usando la regla 55 (entre)
